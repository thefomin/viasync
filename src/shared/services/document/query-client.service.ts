import {
	columnApiQuery,
	documentApiQuery,
	documentMenuApiQuery,
	documentsApiQuery,
	documentsArchiveApiQuery,
	documentsArchivedApiQuery,
	documentsFavoritedApiQuery,
	documentsLastVisitedApiQuery
} from '@/shared/api'
import { IDocument } from '@/shared/types/document'
import { QueryClient } from '@tanstack/react-query'

export class QueryClientService {
	private readonly queryClient: QueryClient

	constructor(queryClient: QueryClient) {
		this.queryClient = queryClient
	}
	public updateAllFields(
		initialData: IDocument,
		updates: Partial<IDocument>,
		options: { updateArchive?: boolean; updateFavorites?: boolean } = {},
		deletedId?: string
	): void {
		this.updateByDocumentId(initialData, updates)
		this.updateDocuments(initialData, updates)

		if (options.updateFavorites) {
			this.updateFavorites(initialData, updates)
		}
		if (options.updateArchive) {
			this.updateArchive(initialData, updates, deletedId)
		}
	}

	private updateDocuments(
		initialData: IDocument,
		updates: Partial<IDocument>
	): void {
		// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
		const updateRecursive = (docs: IDocument[]): IDocument[] => {
			return docs.map(doc => {
				// –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
				if (doc.id === initialData.id) {
					return { ...doc, ...updates }
				}

				// –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
				if (doc.children) {
					return {
						...doc,
						children: updateRecursive(doc.children) // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–µ–π
					}
				}

				// –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ç–µ–π, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
				return doc
			})
		}

		const queryKeys = [
			documentsApiQuery.baseKey,
			documentsLastVisitedApiQuery.baseKey
		]

		for (const queryKey of queryKeys) {
			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
			const documents = this.queryClient.getQueryData<IDocument[]>([
				queryKey
			])

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
			if (documents) {
				console.log('–û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è:', queryKey) // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
				const updatedDocuments = updateRecursive(documents)
				console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:', updatedDocuments) // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

				// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ
				this.queryClient.setQueryData<IDocument[]>(
					[queryKey],
					updatedDocuments
				)
			}
		}
	}

	private updateFavorites(
		initialData: IDocument,
		updates: Partial<IDocument>
	): void {
		const favorites =
			this.queryClient.getQueryData<IDocument[]>([
				documentsFavoritedApiQuery.baseKey
			]) || []

		// –ï—Å–ª–∏ –≤ updates –Ω–µ—Ç isFavorited, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ initialData
		const isFavorited = updates.isFavorited ?? initialData.isFavorited

		const updatedFavorites = isFavorited
			? // –ï—Å–ª–∏ isFavorited === true, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
				favorites.some(doc => doc.id === initialData.id)
				? favorites.map(doc =>
						doc.id === initialData.id ? { ...doc, ...updates } : doc
					)
				: [...favorites, { ...initialData, ...updates }]
			: // –ï—Å–ª–∏ isFavorited === false, —É–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
				favorites.filter(doc => doc.id !== initialData.id)

		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
		const updatedFavoritesWithChildren = updatedFavorites.map(doc => {
			if (doc.children) {
				const updatedChildren = doc.children.map(child => {
					if (child.id === initialData.id) {
						return { ...child, ...updates }
					}
					return child
				})
				return { ...doc, children: updatedChildren }
			}
			return doc
		})

		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ queryClient
		this.queryClient.setQueryData<IDocument[]>(
			[documentsFavoritedApiQuery.baseKey],
			updatedFavoritesWithChildren
		)
	}

	private addDocument(doc: IDocument, targetArray: IDocument[]): IDocument[] {
		const exists = targetArray.some(d => d.id === doc.id)

		// –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
		if (exists) return targetArray

		// –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ children
		const parent = targetArray.find(d => d.id === doc.parentDocumentId)
		if (parent && parent.children?.some(child => child.id === doc.id)) {
			console.warn(
				`‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –≤ children —Ä–æ–¥–∏—Ç–µ–ª—è ${doc.parentDocumentId}`
			)
			return targetArray
		}

		return [...targetArray, doc]
	}
	private restoreDocumentRecursively(
		documents: IDocument[],
		documentToRestore: IDocument,
		updates: Partial<IDocument>
	): IDocument[] {
		return documents.map(doc => {
			if (doc.id === documentToRestore.parentDocumentId) {
				// –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ children —Ä–æ–¥–∏—Ç–µ–ª—è
				const updatedChildren = doc.children
					? [...doc.children, { ...documentToRestore, ...updates }]
					: [{ ...documentToRestore, ...updates }]
				return { ...doc, children: updatedChildren }
			}

			// –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∏, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö
			if (doc.children && doc.children.length > 0) {
				return {
					...doc,
					children: this.restoreDocumentRecursively(
						doc.children,
						documentToRestore,
						updates
					)
				}
			}

			return doc // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –¥–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
		})
	}
	private removeDocumentRecursively(
		documents: IDocument[],
		documentId: string
	): IDocument[] {
		return documents.reduce((acc, doc) => {
			if (doc.id === documentId) return acc

			// –ï—Å–ª–∏ —É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –µ—Å—Ç—å –¥–µ—Ç–∏ ‚Äî —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
			const children = doc.children
				? this.removeDocumentRecursively(doc.children, documentId)
				: undefined

			return [...acc, { ...doc, ...(children ? { children } : {}) }]
		}, [] as IDocument[])
	}

	private updateArchive(
		initialData: IDocument,
		updates: Partial<IDocument>,
		deletedId?: string
	): void {
		const archives =
			this.queryClient.getQueryData<IDocument[]>([
				documentsArchivedApiQuery.baseKey,
				[null, documentsArchiveApiQuery.baseKey]
			]) || []

		const favorites =
			this.queryClient.getQueryData<IDocument[]>([
				documentsFavoritedApiQuery.baseKey
			]) || []

		const documents =
			this.queryClient.getQueryData<IDocument[]>([
				documentsApiQuery.baseKey
			]) || []

		console.log('üîç –ê—Ä—Ö–∏–≤ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', JSON.stringify(archives))
		console.log('üìå –î–æ–∫—É–º–µ–Ω—Ç –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', JSON.stringify(initialData))

		// –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å parentDocumentId, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
		const columns = this.queryClient.getQueryData<IDocument[]>([
			columnApiQuery.baseKey,
			initialData.parentDocumentId
		])
		if (columns) {
			this.queryClient.invalidateQueries({
				queryKey: [columnApiQuery.baseKey, initialData.parentDocumentId]
			})
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ isArchived
		const isArchived = updates.isArchived ?? initialData.isArchived

		// –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π
		let updatedArchives = [...archives]
		let updatedFavorites = [...favorites]
		let updatedDocuments = [...documents]

		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –≤—Å–µ—Ö —Ç—Ä—ë—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
		const removeDocument = (id: string): void => {
			updatedDocuments = this.removeDocumentRecursively(
				updatedDocuments,
				id
			)
			updatedFavorites = this.removeDocumentRecursively(
				updatedFavorites,
				id
			)
			updatedArchives = this.removeDocumentRecursively(
				updatedArchives,
				id
			)
		}

		// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω deletedId ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
		if (deletedId) {
			console.log(`üóë –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å id: ${deletedId}`)
			removeDocument(deletedId)

			// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
			this.queryClient.setQueryData<IDocument[]>(
				[documentsApiQuery.baseKey],
				updatedDocuments
			)
			this.queryClient.setQueryData<IDocument[]>(
				[documentsArchivedApiQuery.baseKey],
				updatedArchives
			)
			this.queryClient.setQueryData<IDocument[]>(
				[documentsFavoritedApiQuery.baseKey],
				updatedFavorites
			)
			return
		}

		// –í–µ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
		if (isArchived) {
			// –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
			removeDocument(initialData.id)
			initialData.children?.forEach(child => removeDocument(child.id))

			// –¢–∞–∫–∂–µ, –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ children –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –¥—Ä—É–≥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ
			updatedDocuments = updatedDocuments.map(doc => {
				if (doc.children?.some(child => child.id === initialData.id)) {
					return {
						...doc,
						children: doc.children.filter(
							child => child.id !== initialData.id
						)
					}
				}
				return doc
			})
			console.log(
				'üìå –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:',
				JSON.stringify(updatedDocuments, null, 2)
			)

			// –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∏ –∞—Ä—Ö–∏–≤–∞–º
			this.queryClient.setQueryData<IDocument[]>(
				[documentsApiQuery.baseKey],
				updatedDocuments
			)
			this.queryClient.setQueryData<IDocument[]>(
				[documentsArchivedApiQuery.baseKey],
				(oldArchives = []) => [
					...oldArchives,
					{ ...initialData, ...updates }
				]
			)
		} else {
			// –í–µ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∞—Ä—Ö–∏–≤–∞
			removeDocument(initialData.id)

			// –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
			if (initialData.parentDocumentId === null) {
				updatedDocuments = this.addDocument(
					{ ...initialData, ...updates },
					updatedDocuments
				)
			}

			// –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –±—ã–ª –∏–∑–±—Ä–∞–Ω–Ω—ã–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ favorites
			// if (initialData.isFavorited) {
			updatedFavorites = this.restoreDocumentRecursively(
				updatedFavorites,
				initialData,
				updates
			)
			// }

			// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–∞–∫–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (–º–µ—Ç–æ–¥ restoreDocumentRecursively)
			if (!initialData.isFavorited) {
				updatedDocuments = this.restoreDocumentRecursively(
					updatedDocuments,
					initialData,
					updates
				)
			}

			// –£–±–∏—Ä–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∞—Ä—Ö–∏–≤–∞
			this.queryClient.setQueryData<IDocument[]>(
				[documentsArchivedApiQuery.baseKey],
				(oldArchives = []) =>
					oldArchives.filter(doc => doc.id !== initialData.id)
			)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è favorites –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
		this.queryClient.setQueryData<IDocument[]>(
			[documentsFavoritedApiQuery.baseKey],
			updatedFavorites
		)
		this.queryClient.setQueryData<IDocument[]>(
			[documentsApiQuery.baseKey],
			updatedDocuments
		)

		console.log(
			'üìå –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:',
			JSON.stringify(updatedDocuments, null, 2)
		)
		console.log(
			'üìå –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã Archives:',
			JSON.stringify(updatedArchives, null, 2)
		)
	}

	private updateByDocumentId(
		initialData: IDocument,
		updates: Partial<IDocument>
	): void {
		const document = this.queryClient.getQueryData<IDocument>([
			documentApiQuery.baseKey,
			initialData.id
		])

		if (document) {
			this.queryClient.setQueryData<IDocument>(
				[documentApiQuery.baseKey, initialData.id],
				{ ...document, ...updates }
			)
		}

		const documentMenu = this.queryClient.getQueryData<IDocument>([
			documentMenuApiQuery.baseKey,
			initialData.id
		])

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ documentMenu —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
		if (documentMenu) {
			this.queryClient.setQueryData<IDocument>(
				[documentMenuApiQuery.baseKey, initialData.id],
				{ ...documentMenu, ...updates }
			)
		}
	}
}
